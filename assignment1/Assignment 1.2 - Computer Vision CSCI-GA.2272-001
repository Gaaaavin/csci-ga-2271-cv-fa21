{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Assignment 1.2 - Computer Vision CSCI-GA.2272-001","provenance":[{"file_id":"1dd6QGc2yN2JTNl7bNBcK53xSjtJmwymq","timestamp":1631209209119},{"file_id":"1sLrcEw78KFZr6v6nySKtq1YSo1XQ119s","timestamp":1599617367386},{"file_id":"1c38tHdClrZzwP9yVLMGXYCAKubpdKvlq","timestamp":1599604973675}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"vN5lM2csj9v7"},"source":["# Computer Vision CSCI-GA.2272-001 Assignment 1, part 2.\n","\n","Fall 2021 semester.\n","\n","Due date: **September 30th 2021.**\n","\n","## Introduction\n","This assignment requires you to participate in a Kaggle competition with the rest of the class on the The German Traffic Sign Recognition Benchmark [http://benchmark.ini.rub.de/?section=gtsrb&subsection=news]. The objective is to produce a model that gives the highest possible accuracy on the test portion of this dataset. You can register for the competition using the private link: https://www.kaggle.com/c/nyu-computer-vision-csci-ga2271-2021/overview.\n","\n","Skeleton code is provided in the colab below. This contains code for training a simple default model and evaluating it on the test set. The evaluation script produces a file gtsrb_kaggle.csv that lists the IDs of the test set images, along with their predicted label. This file should be uploaded to the Kaggle webpage, which will then produce a test accuracy score. \n","\n","Your goal is to implement a new model architecture that improves upon the baseline performance. You are free to implement any approach covered in class or from research papers. This part will count for 50% of the overall grade for assignment 1. This Grading will depend on your Kaggle performance and rank, as well as novelty of the architecture.  \n","\n","## Rules\n","You should make a copy of this Colab (File->Save a copy in Drive). Please start the assignment early and don’t be afraid to ask for help from either the TAs or myself. You are allowed to collaborate with other students in terms discussing ideas and possible solutions. However you code up the solution yourself, i.e. you must write your own code. Copying your friends code and just changing all the names of the variables is not allowed! You are not allowed to use solutions from similar assignments in courses from other institutions, or those found elsewhere on the web.\n","Your solutions should be submitted via the Brightspace system. This should include a brief description (in the Colab) explaining the model architectures you explored, citing any relevant papers or techniques that you used. You should also include convergence plots of training accuracy vs epoch for relevant models. \n","\n","### Important Details\n","• You are only allowed eight (8) submissions to the Kaggle evaluation server per day. This is to prevent over-fitting on the test dataset. So be sure to start the assignment early!\n","\n","• You are NOT ALLOWED to use the test set labels during training in any way. Doing so will be regarded as cheating and penalized accordingly.\n","\n","• The evaluation metric is accuracy, i.e. the fraction of test set examples where the predicted label agrees with the ground truth label.\n","\n","• You should be able to achieve a test accuracy of at least 0.95. \n","\n","• *Extra important:* Please use your NYU NetID as your Kaggle username, so the TAs can figure out which user you are on the leaderboard. \n"]},{"cell_type":"markdown","metadata":{"id":"DE27gUhgcbM1"},"source":["# Model Description\n","\n","My model is mainly based on two references [1][2]. The model uses the structure described in [2] and increased the number of channels in each covolutional layer. Moreover, the model incorporates spatial transformer networks (SPN) descripbed in [1] to do pre-processing to the images.\n","\n","[1]: Arcos-García, Álvaro, Juan A. Alvarez-Garcia, and Luis M. Soria-Morillo. \"Deep neural network for traffic sign recognition systems: An analysis of spatial transformers and stochastic optimisation methods.\" Neural Networks 99 (2018): 158-165.\n","\n","[2]: Zaibi, Ameur, Anis Ladgham, and Anis Sakly. \"A Lightweight Model for Traffic Sign Classification Based on Enhanced LeNet-5 Network.\" Journal of Sensors 2021 (2021)."]},{"cell_type":"markdown","metadata":{"id":"Pghx7ngowha0"},"source":["# Dataset Preparation\n","\n","\n","1.  Download `dataset.zip` from to your local machine.\n","2.  Unzip the file. You should see a `dataset` directory with three subfolders (`training,validation,testing`). \n","3.  Go to Google Drive (on your NYU account) and make a directory `assign2_dataset` (New button --> New Folder).\n","4.  Upload each of the three subfolders to it (New button --> Folder upload). \n","5.  Run the code block below. It will ask for permission to mount your Google Drive (NYU account) so this colab can access it. Paste the authorization code into the box as requested. \n"]},{"cell_type":"code","metadata":{"id":"o0aPnIKXpWbN","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1632835573109,"user_tz":240,"elapsed":19962,"user":{"displayName":"Xinhao Liu","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgTaqG8uTuobBfjQajPs_vQkO2WiHpGCHkab7z9Og=s64","userId":"05355002005015990914"}},"outputId":"a29488c7-feb2-4f09-d133-eff35b5e4211"},"source":["# Load the Drive helper and mount\n","from google.colab import drive\n","drive.mount('/content/drive')\n","%cd  /content/drive/MyDrive/Colab Notebooks/Computer Vision Assignment/Assignment 1/dataset"],"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n","/content/drive/MyDrive/Colab Notebooks/Computer Vision Assignment/Assignment 1/dataset\n"]}]},{"cell_type":"markdown","metadata":{"id":"_6jVfIVtrn5u"},"source":["# Dataloader"]},{"cell_type":"code","metadata":{"id":"z21UKj_bT--_","executionInfo":{"status":"ok","timestamp":1632835585524,"user_tz":240,"elapsed":11154,"user":{"displayName":"Xinhao Liu","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgTaqG8uTuobBfjQajPs_vQkO2WiHpGCHkab7z9Og=s64","userId":"05355002005015990914"}}},"source":["import torch\n","from torch.utils.data import Dataset\n","import torch.nn as nn\n","import torch.nn.functional as F\n","import torch.optim as optim\n","import torchvision\n","from torchvision import datasets, transforms\n","\n","import numpy as np\n","import matplotlib.pyplot as plt\n","\n","batch_size = 32\n","momentum = 0.9\n","lr = 1e-3\n","epochs = 50\n","log_interval = 500\n","device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n","\n","class MyDataset(Dataset):\n","\n","    def __init__(self, X_path=\"X.pt\", y_path=\"y.pt\"):\n","\n","        self.X = torch.load(X_path).squeeze(1)\n","        self.y = torch.load(y_path).squeeze(1)\n","    \n","    def __len__(self):\n","        return self.X.size(0)\n","\n","    def __getitem__(self, idx):\n","        return self.X[idx], self.y[idx]\n","\n","train_dataset = MyDataset(X_path=\"train/X.pt\", y_path=\"train/y.pt\")\n","val_dataset = MyDataset(X_path=\"validation/X.pt\", y_path=\"validation/y.pt\")\n","\n","train_loader = torch.utils.data.DataLoader(\n","    train_dataset, batch_size=batch_size, shuffle=True, num_workers=1)\n","\n","val_loader = torch.utils.data.DataLoader(\n","    val_dataset, batch_size=batch_size, shuffle=True, num_workers=1)\n","\n","transform = transforms.Compose([transforms.Grayscale(), transforms.RandomEqualize(1.)])"],"execution_count":2,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Qd6W0pQRvZKO"},"source":["# Model"]},{"cell_type":"code","metadata":{"id":"zeev4SoMvazV","executionInfo":{"status":"ok","timestamp":1632835586457,"user_tz":240,"elapsed":111,"user":{"displayName":"Xinhao Liu","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgTaqG8uTuobBfjQajPs_vQkO2WiHpGCHkab7z9Og=s64","userId":"05355002005015990914"}}},"source":["import torch\n","import torch.nn as nn\n","import torch.nn.functional as F\n","\n","nclasses = 43 # GTSRB has 43 classes\n","\n","class LeNet(nn.Module):\n","    def __init__(self):\n","        super(LeNet, self).__init__()\n","        self.conv1 = nn.Sequential(\n","            nn.Conv2d(3, 64, kernel_size=5), \n","            nn.BatchNorm2d(64),\n","            nn.LeakyReLU(),\n","            nn.Conv2d(64, 128, kernel_size=5),\n","            nn.BatchNorm2d(128),\n","            nn.LeakyReLU(),\n","            nn.MaxPool2d(kernel_size=2, stride=2))\n","        self.conv2 = nn.Sequential(\n","            nn.Conv2d(128, 256, kernel_size=3), \n","            nn.BatchNorm2d(256),\n","            nn.LeakyReLU(),\n","            nn.Conv2d(256, 256, kernel_size=3),\n","            nn.BatchNorm2d(256),\n","            nn.LeakyReLU(),\n","            nn.Dropout2d(),\n","            nn.MaxPool2d(kernel_size=2, stride=2))\n","        self.fc1 = nn.Sequential(nn.Flatten(), nn.Linear(4096, 512), nn.BatchNorm1d(512), nn.LeakyReLU(), nn.Dropout())\n","        self.fc2 = nn.Linear(512, 43)\n","\n","    # Spatial transformer localization-network\n","        self.localization = nn.Sequential(\n","            nn.Conv2d(3, 64, kernel_size=7),\n","            nn.MaxPool2d(2, stride=2),\n","            nn.ReLU(True),\n","            nn.Conv2d(64, 128, kernel_size=5),\n","            nn.MaxPool2d(2, stride=2),\n","            nn.ReLU(True)\n","        )\n","\n","        # Regressor for the 3 * 2 affine matrix\n","        self.fc_loc = nn.Sequential(\n","            nn.Linear(128 * 4 * 4, 64),\n","            nn.ReLU(True),\n","            nn.Linear(64, 3 * 2)\n","        )\n","\n","        # Initialize the weights/bias with identity transformation\n","        self.fc_loc[2].weight.data.zero_()\n","        self.fc_loc[2].bias.data.copy_(torch.tensor([1, 0, 0, 0, 1, 0], dtype=torch.float))\n","\n","    # Spatial transformer network forward function\n","    def stn(self, x):\n","        xs = self.localization(x)\n","        xs = xs.view(-1, 128 * 4 * 4)\n","        theta = self.fc_loc(xs)\n","        theta = theta.view(-1, 2, 3)\n","\n","        grid = F.affine_grid(theta, x.size())\n","        x = F.grid_sample(x, grid)\n","\n","        return x    \n","\n","    def forward(self, x):\n","        x = self.stn(x)\n","        x = self.conv1(x)\n","        x = self.conv2(x)\n","        x = self.fc1(x)\n","        x = self.fc2(x)\n","        return F.log_softmax(x,dim=1)"],"execution_count":3,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Ty9TAvrdvf8C"},"source":["# Training"]},{"cell_type":"code","metadata":{"id":"_A5-OCgBvhXv","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1632802599874,"user_tz":240,"elapsed":1976192,"user":{"displayName":"Xinhao Liu","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgTaqG8uTuobBfjQajPs_vQkO2WiHpGCHkab7z9Og=s64","userId":"05355002005015990914"}},"outputId":"bb6b0971-1df3-40bc-9608-a87c83ff7825"},"source":["model = LeNet()\n","model = model.to(device)\n","optimizer = optim.Adam(model.parameters(), lr=lr)\n","scheduler = optim.lr_scheduler.ExponentialLR(optimizer, gamma=0.9)\n","\n","criterion = nn.CrossEntropyLoss()\n","valid_criterion = nn.CrossEntropyLoss(reduction='sum')\n","\n","train_loss = np.zeros(epochs)\n","train_accuracy = np.zeros(epochs)\n","valid_loss = np.zeros(epochs)\n","valid_accuracy = np.zeros(epochs)\n","\n","def train(epoch):\n","    model.train()\n","    correct = 0\n","    for batch_idx, (data, target) in enumerate(train_loader):\n","        data = data.to(device)\n","        # data = transform(data)\n","        target = target.to(device)\n","        optimizer.zero_grad()\n","        output = model(data)\n","        loss = criterion(output, target)\n","        loss.backward()\n","        optimizer.step()\n","\n","        pred = output.data.max(1, keepdim=True)[1] # get the index of the max log-probability\n","        correct += pred.eq(target.data.view_as(pred)).cpu().sum()\n","\n","        if batch_idx % log_interval == 0:\n","            print('Train Epoch: {} [{}/{} ({:.0f}%)]\\tLoss: {:.6f}'.format(\n","                epoch, batch_idx * len(data), len(train_loader.dataset),\n","                100. * batch_idx / len(train_loader), loss.item()))\n","\n","    scheduler.step()\n","    \n","    return loss.item(), 100. * correct / len(train_loader.dataset)\n","\n","def validation():\n","    model.eval()\n","    validation_loss = 0\n","    correct = 0\n","    for data, target in val_loader:\n","        data = data.to(device)\n","        # data = transform(data)\n","        target = target.to(device)\n","        output = model(data)\n","        validation_loss += valid_criterion(output, target).item() # sum up batch loss\n","        pred = output.data.max(1, keepdim=True)[1] # get the index of the max log-probability\n","        correct += pred.eq(target.data.view_as(pred)).cpu().sum()\n","\n","    validation_loss /= len(val_loader.dataset)\n","    print('\\nValidation set: Average loss: {:.4f}, Accuracy: {}/{} ({:.2f}%)\\n'.format(\n","        validation_loss, correct, len(val_loader.dataset),\n","        100. * correct / len(val_loader.dataset)))\n","\n","    return validation_loss, 100. * correct / len(val_loader.dataset)\n","\n","\n","for epoch in range(1, epochs + 1):\n","    train_loss[epoch - 1], train_accuracy[epoch - 1] = train(epoch)\n","    valid_loss[epoch - 1], valid_accuracy[epoch - 1] = validation()\n","    if epoch > epochs - 5:\n","        model_file = 'model_' + str(epoch) + '.pth'\n","        torch.save(model.state_dict(), model_file)\n","        print('\\nSaved model to ' + model_file + '.')\n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/torch/nn/functional.py:718: UserWarning: Named tensors and all their associated APIs are an experimental feature and subject to change. Please do not use them for anything important until they are released as stable. (Triggered internally at  /pytorch/c10/core/TensorImpl.h:1156.)\n","  return torch.max_pool2d(input, kernel_size, stride, padding, dilation, ceil_mode)\n","/usr/local/lib/python3.7/dist-packages/torch/nn/functional.py:4044: UserWarning: Default grid_sample and affine_grid behavior has changed to align_corners=False since 1.3.0. Please specify align_corners=True if the old behavior is desired. See the documentation of grid_sample for details.\n","  \"Default grid_sample and affine_grid behavior has changed \"\n","/usr/local/lib/python3.7/dist-packages/torch/nn/functional.py:3982: UserWarning: Default grid_sample and affine_grid behavior has changed to align_corners=False since 1.3.0. Please specify align_corners=True if the old behavior is desired. See the documentation of grid_sample for details.\n","  \"Default grid_sample and affine_grid behavior has changed \"\n"]},{"output_type":"stream","name":"stdout","text":["Train Epoch: 1 [0/35339 (0%)]\tLoss: 3.886778\n","Train Epoch: 1 [16000/35339 (45%)]\tLoss: 0.111559\n","Train Epoch: 1 [32000/35339 (90%)]\tLoss: 0.020543\n","\n","Validation set: Average loss: 0.1326, Accuracy: 3725/3870 (96.25%)\n","\n","Train Epoch: 2 [0/35339 (0%)]\tLoss: 0.102581\n","Train Epoch: 2 [16000/35339 (45%)]\tLoss: 0.032217\n","Train Epoch: 2 [32000/35339 (90%)]\tLoss: 0.025473\n","\n","Validation set: Average loss: 0.0990, Accuracy: 3751/3870 (96.93%)\n","\n","Train Epoch: 3 [0/35339 (0%)]\tLoss: 0.009034\n","Train Epoch: 3 [16000/35339 (45%)]\tLoss: 0.010636\n","Train Epoch: 3 [32000/35339 (90%)]\tLoss: 0.012317\n","\n","Validation set: Average loss: 0.1162, Accuracy: 3731/3870 (96.41%)\n","\n","Train Epoch: 4 [0/35339 (0%)]\tLoss: 0.120823\n","Train Epoch: 4 [16000/35339 (45%)]\tLoss: 0.004691\n","Train Epoch: 4 [32000/35339 (90%)]\tLoss: 0.020917\n","\n","Validation set: Average loss: 0.0899, Accuracy: 3754/3870 (97.00%)\n","\n","Train Epoch: 5 [0/35339 (0%)]\tLoss: 0.007864\n","Train Epoch: 5 [16000/35339 (45%)]\tLoss: 0.006011\n","Train Epoch: 5 [32000/35339 (90%)]\tLoss: 0.002300\n","\n","Validation set: Average loss: 0.0555, Accuracy: 3792/3870 (97.98%)\n","\n","Train Epoch: 6 [0/35339 (0%)]\tLoss: 0.007953\n","Train Epoch: 6 [16000/35339 (45%)]\tLoss: 0.000776\n","Train Epoch: 6 [32000/35339 (90%)]\tLoss: 0.011538\n","\n","Validation set: Average loss: 0.0670, Accuracy: 3796/3870 (98.09%)\n","\n","Train Epoch: 7 [0/35339 (0%)]\tLoss: 0.001720\n","Train Epoch: 7 [16000/35339 (45%)]\tLoss: 0.018748\n","Train Epoch: 7 [32000/35339 (90%)]\tLoss: 0.000920\n","\n","Validation set: Average loss: 0.0425, Accuracy: 3812/3870 (98.50%)\n","\n","Train Epoch: 8 [0/35339 (0%)]\tLoss: 0.000039\n","Train Epoch: 8 [16000/35339 (45%)]\tLoss: 0.013978\n","Train Epoch: 8 [32000/35339 (90%)]\tLoss: 0.004839\n","\n","Validation set: Average loss: 0.0593, Accuracy: 3793/3870 (98.01%)\n","\n","Train Epoch: 9 [0/35339 (0%)]\tLoss: 0.002254\n","Train Epoch: 9 [16000/35339 (45%)]\tLoss: 0.045544\n","Train Epoch: 9 [32000/35339 (90%)]\tLoss: 0.000424\n","\n","Validation set: Average loss: 0.0424, Accuracy: 3813/3870 (98.53%)\n","\n","Train Epoch: 10 [0/35339 (0%)]\tLoss: 0.000374\n","Train Epoch: 10 [16000/35339 (45%)]\tLoss: 0.009858\n","Train Epoch: 10 [32000/35339 (90%)]\tLoss: 0.000172\n","\n","Validation set: Average loss: 0.0453, Accuracy: 3817/3870 (98.63%)\n","\n","Train Epoch: 11 [0/35339 (0%)]\tLoss: 0.000279\n","Train Epoch: 11 [16000/35339 (45%)]\tLoss: 0.001946\n","Train Epoch: 11 [32000/35339 (90%)]\tLoss: 0.000346\n","\n","Validation set: Average loss: 0.0383, Accuracy: 3823/3870 (98.79%)\n","\n","Train Epoch: 12 [0/35339 (0%)]\tLoss: 0.000164\n","Train Epoch: 12 [16000/35339 (45%)]\tLoss: 0.000213\n","Train Epoch: 12 [32000/35339 (90%)]\tLoss: 0.000036\n","\n","Validation set: Average loss: 0.0638, Accuracy: 3796/3870 (98.09%)\n","\n","Train Epoch: 13 [0/35339 (0%)]\tLoss: 0.000061\n","Train Epoch: 13 [16000/35339 (45%)]\tLoss: 0.001276\n","Train Epoch: 13 [32000/35339 (90%)]\tLoss: 0.000145\n","\n","Validation set: Average loss: 0.0315, Accuracy: 3838/3870 (99.17%)\n","\n","Train Epoch: 14 [0/35339 (0%)]\tLoss: 0.000071\n","Train Epoch: 14 [16000/35339 (45%)]\tLoss: 0.000083\n","Train Epoch: 14 [32000/35339 (90%)]\tLoss: 0.000807\n","\n","Validation set: Average loss: 0.0472, Accuracy: 3810/3870 (98.45%)\n","\n","Train Epoch: 15 [0/35339 (0%)]\tLoss: 0.000011\n","Train Epoch: 15 [16000/35339 (45%)]\tLoss: 0.002919\n","Train Epoch: 15 [32000/35339 (90%)]\tLoss: 0.000015\n","\n","Validation set: Average loss: 0.0290, Accuracy: 3833/3870 (99.04%)\n","\n","Train Epoch: 16 [0/35339 (0%)]\tLoss: 0.000006\n","Train Epoch: 16 [16000/35339 (45%)]\tLoss: 0.000082\n","Train Epoch: 16 [32000/35339 (90%)]\tLoss: 0.000022\n","\n","Validation set: Average loss: 0.0288, Accuracy: 3840/3870 (99.22%)\n","\n","Train Epoch: 17 [0/35339 (0%)]\tLoss: 0.000169\n","Train Epoch: 17 [16000/35339 (45%)]\tLoss: 0.000101\n","Train Epoch: 17 [32000/35339 (90%)]\tLoss: 0.000065\n","\n","Validation set: Average loss: 0.0375, Accuracy: 3823/3870 (98.79%)\n","\n","Train Epoch: 18 [0/35339 (0%)]\tLoss: 0.017322\n","Train Epoch: 18 [16000/35339 (45%)]\tLoss: 0.010394\n","Train Epoch: 18 [32000/35339 (90%)]\tLoss: 0.000064\n","\n","Validation set: Average loss: 0.0282, Accuracy: 3835/3870 (99.10%)\n","\n","Train Epoch: 19 [0/35339 (0%)]\tLoss: 0.000006\n","Train Epoch: 19 [16000/35339 (45%)]\tLoss: 0.000023\n","Train Epoch: 19 [32000/35339 (90%)]\tLoss: 0.000031\n","\n","Validation set: Average loss: 0.0211, Accuracy: 3845/3870 (99.35%)\n","\n","Train Epoch: 20 [0/35339 (0%)]\tLoss: 0.000033\n","Train Epoch: 20 [16000/35339 (45%)]\tLoss: 0.000046\n","Train Epoch: 20 [32000/35339 (90%)]\tLoss: 0.000049\n","\n","Validation set: Average loss: 0.0358, Accuracy: 3831/3870 (98.99%)\n","\n","Train Epoch: 21 [0/35339 (0%)]\tLoss: 0.004615\n","Train Epoch: 21 [16000/35339 (45%)]\tLoss: 0.000309\n","Train Epoch: 21 [32000/35339 (90%)]\tLoss: 0.000434\n","\n","Validation set: Average loss: 0.0301, Accuracy: 3840/3870 (99.22%)\n","\n","Train Epoch: 22 [0/35339 (0%)]\tLoss: 0.000018\n","Train Epoch: 22 [16000/35339 (45%)]\tLoss: 0.000011\n","Train Epoch: 22 [32000/35339 (90%)]\tLoss: 0.000150\n","\n","Validation set: Average loss: 0.0409, Accuracy: 3825/3870 (98.84%)\n","\n","Train Epoch: 23 [0/35339 (0%)]\tLoss: 0.000002\n","Train Epoch: 23 [16000/35339 (45%)]\tLoss: 0.000009\n","Train Epoch: 23 [32000/35339 (90%)]\tLoss: 0.000005\n","\n","Validation set: Average loss: 0.0286, Accuracy: 3837/3870 (99.15%)\n","\n","Train Epoch: 24 [0/35339 (0%)]\tLoss: 0.000047\n","Train Epoch: 24 [16000/35339 (45%)]\tLoss: 0.000036\n","Train Epoch: 24 [32000/35339 (90%)]\tLoss: 0.000420\n","\n","Validation set: Average loss: 0.0279, Accuracy: 3833/3870 (99.04%)\n","\n","Train Epoch: 25 [0/35339 (0%)]\tLoss: 0.000214\n","Train Epoch: 25 [16000/35339 (45%)]\tLoss: 0.000121\n","Train Epoch: 25 [32000/35339 (90%)]\tLoss: 0.000022\n","\n","Validation set: Average loss: 0.0262, Accuracy: 3834/3870 (99.07%)\n","\n","Train Epoch: 26 [0/35339 (0%)]\tLoss: 0.000001\n","Train Epoch: 26 [16000/35339 (45%)]\tLoss: 0.000166\n","Train Epoch: 26 [32000/35339 (90%)]\tLoss: 0.000004\n","\n","Validation set: Average loss: 0.0232, Accuracy: 3839/3870 (99.20%)\n","\n","Train Epoch: 27 [0/35339 (0%)]\tLoss: 0.000007\n","Train Epoch: 27 [16000/35339 (45%)]\tLoss: 0.000024\n","Train Epoch: 27 [32000/35339 (90%)]\tLoss: 0.000026\n","\n","Validation set: Average loss: 0.0247, Accuracy: 3840/3870 (99.22%)\n","\n","Train Epoch: 28 [0/35339 (0%)]\tLoss: 0.000047\n","Train Epoch: 28 [16000/35339 (45%)]\tLoss: 0.000030\n","Train Epoch: 28 [32000/35339 (90%)]\tLoss: 0.000000\n","\n","Validation set: Average loss: 0.0326, Accuracy: 3837/3870 (99.15%)\n","\n","Train Epoch: 29 [0/35339 (0%)]\tLoss: 0.000008\n","Train Epoch: 29 [16000/35339 (45%)]\tLoss: 0.001656\n","Train Epoch: 29 [32000/35339 (90%)]\tLoss: 0.000007\n","\n","Validation set: Average loss: 0.0272, Accuracy: 3834/3870 (99.07%)\n","\n","Train Epoch: 30 [0/35339 (0%)]\tLoss: 0.000095\n","Train Epoch: 30 [16000/35339 (45%)]\tLoss: 0.000005\n","Train Epoch: 30 [32000/35339 (90%)]\tLoss: 0.000005\n","\n","Validation set: Average loss: 0.0243, Accuracy: 3837/3870 (99.15%)\n","\n","Train Epoch: 31 [0/35339 (0%)]\tLoss: 0.000031\n","Train Epoch: 31 [16000/35339 (45%)]\tLoss: 0.000002\n","Train Epoch: 31 [32000/35339 (90%)]\tLoss: 0.000009\n","\n","Validation set: Average loss: 0.0243, Accuracy: 3841/3870 (99.25%)\n","\n","Train Epoch: 32 [0/35339 (0%)]\tLoss: 0.000000\n","Train Epoch: 32 [16000/35339 (45%)]\tLoss: 0.000001\n","Train Epoch: 32 [32000/35339 (90%)]\tLoss: 0.000010\n","\n","Validation set: Average loss: 0.0230, Accuracy: 3843/3870 (99.30%)\n","\n","Train Epoch: 33 [0/35339 (0%)]\tLoss: 0.000062\n","Train Epoch: 33 [16000/35339 (45%)]\tLoss: 0.000001\n","Train Epoch: 33 [32000/35339 (90%)]\tLoss: 0.000013\n","\n","Validation set: Average loss: 0.0263, Accuracy: 3842/3870 (99.28%)\n","\n","Train Epoch: 34 [0/35339 (0%)]\tLoss: 0.000093\n","Train Epoch: 34 [16000/35339 (45%)]\tLoss: 0.000007\n","Train Epoch: 34 [32000/35339 (90%)]\tLoss: 0.000003\n","\n","Validation set: Average loss: 0.0209, Accuracy: 3847/3870 (99.41%)\n","\n","Train Epoch: 35 [0/35339 (0%)]\tLoss: 0.000164\n","Train Epoch: 35 [16000/35339 (45%)]\tLoss: 0.000004\n","Train Epoch: 35 [32000/35339 (90%)]\tLoss: 0.000012\n","\n","Validation set: Average loss: 0.0240, Accuracy: 3843/3870 (99.30%)\n","\n","Train Epoch: 36 [0/35339 (0%)]\tLoss: 0.000002\n","Train Epoch: 36 [16000/35339 (45%)]\tLoss: 0.000006\n","Train Epoch: 36 [32000/35339 (90%)]\tLoss: 0.000004\n","\n","Validation set: Average loss: 0.0225, Accuracy: 3843/3870 (99.30%)\n","\n","Train Epoch: 37 [0/35339 (0%)]\tLoss: 0.000059\n","Train Epoch: 37 [16000/35339 (45%)]\tLoss: 0.000004\n","Train Epoch: 37 [32000/35339 (90%)]\tLoss: 0.000004\n","\n","Validation set: Average loss: 0.0237, Accuracy: 3843/3870 (99.30%)\n","\n","Train Epoch: 38 [0/35339 (0%)]\tLoss: 0.000001\n","Train Epoch: 38 [16000/35339 (45%)]\tLoss: 0.000004\n","Train Epoch: 38 [32000/35339 (90%)]\tLoss: 0.000002\n","\n","Validation set: Average loss: 0.0232, Accuracy: 3847/3870 (99.41%)\n","\n","Train Epoch: 39 [0/35339 (0%)]\tLoss: 0.000001\n","Train Epoch: 39 [16000/35339 (45%)]\tLoss: 0.000003\n","Train Epoch: 39 [32000/35339 (90%)]\tLoss: 0.025678\n","\n","Validation set: Average loss: 0.0243, Accuracy: 3847/3870 (99.41%)\n","\n","Train Epoch: 40 [0/35339 (0%)]\tLoss: 0.000064\n","Train Epoch: 40 [16000/35339 (45%)]\tLoss: 0.000002\n","Train Epoch: 40 [32000/35339 (90%)]\tLoss: 0.000002\n","\n","Validation set: Average loss: 0.0265, Accuracy: 3842/3870 (99.28%)\n","\n","Train Epoch: 41 [0/35339 (0%)]\tLoss: 0.000006\n","Train Epoch: 41 [16000/35339 (45%)]\tLoss: 0.000002\n","Train Epoch: 41 [32000/35339 (90%)]\tLoss: 0.000017\n","\n","Validation set: Average loss: 0.0243, Accuracy: 3846/3870 (99.38%)\n","\n","Train Epoch: 42 [0/35339 (0%)]\tLoss: 0.000004\n","Train Epoch: 42 [16000/35339 (45%)]\tLoss: 0.000062\n","Train Epoch: 42 [32000/35339 (90%)]\tLoss: 0.000002\n","\n","Validation set: Average loss: 0.0268, Accuracy: 3839/3870 (99.20%)\n","\n","Train Epoch: 43 [0/35339 (0%)]\tLoss: 0.000001\n","Train Epoch: 43 [16000/35339 (45%)]\tLoss: 0.000002\n","Train Epoch: 43 [32000/35339 (90%)]\tLoss: 0.000001\n","\n","Validation set: Average loss: 0.0258, Accuracy: 3842/3870 (99.28%)\n","\n","Train Epoch: 44 [0/35339 (0%)]\tLoss: 0.000120\n","Train Epoch: 44 [16000/35339 (45%)]\tLoss: 0.000001\n","Train Epoch: 44 [32000/35339 (90%)]\tLoss: 0.000003\n","\n","Validation set: Average loss: 0.0227, Accuracy: 3848/3870 (99.43%)\n","\n","Train Epoch: 45 [0/35339 (0%)]\tLoss: 0.000000\n","Train Epoch: 45 [16000/35339 (45%)]\tLoss: 0.000017\n","Train Epoch: 45 [32000/35339 (90%)]\tLoss: 0.000003\n","\n","Validation set: Average loss: 0.0222, Accuracy: 3849/3870 (99.46%)\n","\n","Train Epoch: 46 [0/35339 (0%)]\tLoss: 0.000313\n","Train Epoch: 46 [16000/35339 (45%)]\tLoss: 0.000051\n","Train Epoch: 46 [32000/35339 (90%)]\tLoss: 0.000001\n","\n","Validation set: Average loss: 0.0234, Accuracy: 3847/3870 (99.41%)\n","\n","\n","Saved model to model_46.pth.\n","Train Epoch: 47 [0/35339 (0%)]\tLoss: 0.000000\n","Train Epoch: 47 [16000/35339 (45%)]\tLoss: 0.000142\n","Train Epoch: 47 [32000/35339 (90%)]\tLoss: 0.000034\n","\n","Validation set: Average loss: 0.0270, Accuracy: 3842/3870 (99.28%)\n","\n","\n","Saved model to model_47.pth.\n","Train Epoch: 48 [0/35339 (0%)]\tLoss: 0.000024\n","Train Epoch: 48 [16000/35339 (45%)]\tLoss: 0.000003\n","Train Epoch: 48 [32000/35339 (90%)]\tLoss: 0.000015\n","\n","Validation set: Average loss: 0.0232, Accuracy: 3846/3870 (99.38%)\n","\n","\n","Saved model to model_48.pth.\n","Train Epoch: 49 [0/35339 (0%)]\tLoss: 0.000001\n","Train Epoch: 49 [16000/35339 (45%)]\tLoss: 0.000021\n","Train Epoch: 49 [32000/35339 (90%)]\tLoss: 0.000007\n","\n","Validation set: Average loss: 0.0227, Accuracy: 3847/3870 (99.41%)\n","\n","\n","Saved model to model_49.pth.\n","Train Epoch: 50 [0/35339 (0%)]\tLoss: 0.000000\n","Train Epoch: 50 [16000/35339 (45%)]\tLoss: 0.000001\n","Train Epoch: 50 [32000/35339 (90%)]\tLoss: 0.000001\n","\n","Validation set: Average loss: 0.0245, Accuracy: 3845/3870 (99.35%)\n","\n","\n","Saved model to model_50.pth.\n"]}]},{"cell_type":"markdown","metadata":{"id":"jX-AgVaCbIMo"},"source":["# Plot Loss adn Accuracy"]},{"cell_type":"code","metadata":{"id":"KxlnTZ_YbNHh","colab":{"base_uri":"https://localhost:8080/","height":573},"executionInfo":{"status":"ok","timestamp":1632802600475,"user_tz":240,"elapsed":606,"user":{"displayName":"Xinhao Liu","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgTaqG8uTuobBfjQajPs_vQkO2WiHpGCHkab7z9Og=s64","userId":"05355002005015990914"}},"outputId":"473ff7a0-fa1a-4140-d85a-0e8872b3dccf"},"source":["x = np.arange(1, epochs + 1, 1)\n","plt.plot(x, train_loss, label='train');\n","plt.plot(x, valid_loss, label='validation');\n","plt.xlabel('Epochs')\n","plt.ylabel('Loss')\n","plt.legend();\n","plt.title('Train/Validation Loss')\n","plt.show()\n","plt.clf()\n","plt.plot(x, train_accuracy, label='train');\n","plt.plot(x, valid_accuracy, label='validation');\n","plt.xlabel('Epochs')\n","plt.ylabel('Accuracy')\n","plt.legend();\n","plt.title('Train/Validation Accuracy')\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"eVN1f1p7w59X"},"source":["# Evaluate and Submit to Kaggle\n","\n"]},{"cell_type":"code","metadata":{"id":"_BM5qP64w5zB","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1632836329692,"user_tz":240,"elapsed":29904,"user":{"displayName":"Xinhao Liu","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgTaqG8uTuobBfjQajPs_vQkO2WiHpGCHkab7z9Og=s64","userId":"05355002005015990914"}},"outputId":"cdf88ae7-d467-4e1e-b081-d68b515716a0"},"source":["import pickle\n","import pandas as pd\n","\n","outfile = 'gtsrb_kaggle.csv'\n","\n","output_file = open(outfile, \"w\")\n","dataframe_dict = {\"Filename\" : [], \"ClassId\": []}\n","\n","test_data = torch.load('testing/test.pt')\n","file_ids = pickle.load(open('testing/file_ids.pkl', 'rb'))\n","model = LeNet() # TODO: load your model here, don't forget to put it on Eval mode !\n","model.load_state_dict(torch.load('model_50.pth'))\n","model = model.to(device)\n","model.eval()\n","\n","for i, data in enumerate(test_data):\n","    data = data.unsqueeze(0)\n","    data = data.to(device)\n","    output = model(data)\n","    pred = output.data.max(1, keepdim=True)[1].item()\n","    file_id = file_ids[i][0:5]\n","    dataframe_dict['Filename'].append(file_id)\n","    dataframe_dict['ClassId'].append(pred)\n","\n","df = pd.DataFrame(data=dataframe_dict)\n","df.to_csv(outfile, index=False)\n","print(\"Written to csv file {}\".format(outfile))"],"execution_count":9,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/torch/nn/functional.py:4044: UserWarning: Default grid_sample and affine_grid behavior has changed to align_corners=False since 1.3.0. Please specify align_corners=True if the old behavior is desired. See the documentation of grid_sample for details.\n","  \"Default grid_sample and affine_grid behavior has changed \"\n","/usr/local/lib/python3.7/dist-packages/torch/nn/functional.py:3982: UserWarning: Default grid_sample and affine_grid behavior has changed to align_corners=False since 1.3.0. Please specify align_corners=True if the old behavior is desired. See the documentation of grid_sample for details.\n","  \"Default grid_sample and affine_grid behavior has changed \"\n"]},{"output_type":"stream","name":"stdout","text":["Written to csv file gtsrb_kaggle.csv\n"]}]},{"cell_type":"markdown","metadata":{"id":"BhSl_4kn6sox"},"source":["# Submitting to Kaggle\n","\n","Now take this csv file, download it from your Google drive and then submit it to Kaggle to check performance of your model."]}]}